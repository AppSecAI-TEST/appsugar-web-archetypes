buildscript {	
	ext.loadGroovyConfig={ p ->
		if(p == null){
			return new java.util.HashMap()
		}
		def configFile = file("environment.groovy")
		def profileObject = new ConfigSlurper(p).parse(configFile.toURL()).toProperties()
		if(profileObject.isEmpty()){
			throw new InvalidUserDataException("profile not found name is"+p)
		}
		return profileObject
	}
	ext{
		springBootVersion = "1.4.0.RELEASE"
		env = loadGroovyConfig("base")
		env.putAll(loadGroovyConfig(System.getProperty("profile")))
		env.putAll(System.properties)
	}
	
	repositories {
		mavenCentral()
		mavenLocal()
		jcenter()
		maven{
			url "http://nexus.ggxueche.cn/nexus/content/groups/public/"
		}
	}
	dependencies {
		classpath ("io.github.divinespear:jpa-schema-gradle-plugin:0.2.0-1")
		classpath ("com.ferigma:dbunit-gradle-plugin:0.1.0")
		classpath ("${env['test.jdbc.groupId']}:${env['test.jdbc.artifactId']}:${env['test.jdbc.version']}")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
	configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.hibernate') {
                details.useVersion '4.3.11.Final'
            }
        }
    }
}

plugins {
	//gradle release -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=1.0.0-release -Prelease.newVersion=1.0.1-SNAPSHOT
    id 'net.researchgate.release' version '2.3.5'
}
apply plugin: 'java'

configure(subprojects) { project ->
	apply plugin: "java"
	
	repositories {
		mavenCentral()
		mavenLocal()
		maven{
			url = "http://nexus.ggxueche.cn/nexus/content/groups/public/"
		}
	}

	
	ext{
		appsugarVersion = "2.0.7-SNAPSHOT"
		junitVersion = "4.12"
		elApiVersion = "3.0.0"
		shiroVersion = "1.2.4"
		ehcacheVersion = "2.10.2"
		jstlVersion = "1.2"
		wro4jVersion = "1.7.9"
		sitemeshVersion = "3.0.1"
		jqueryValidationVersion = "1.15.0"
		jqueryVersion = "2.2.3"
		bootstrapVersion = "3.3.6"
		logbackVersion = "1.1.7"
	}
	compileJava.options.encoding = env["encoding"]
	compileTestJava.options.encoding = env["encoding"]
	
	dependencies{
		testCompile ("junit:junit:${junitVersion}")
		testCompile ("javax.el:javax.el-api:${elApiVersion}")
		testCompile ("${env['test.jdbc.groupId']}:${env['test.jdbc.artifactId']}:${env['test.jdbc.version']}")
		testCompile ("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	}
	processTestResources {
		from(sourceSets.test.resources.srcDirs) {
			include '**/*.properties'
			filter(org.apache.tools.ant.filters.ReplaceTokens,tokens: env)
		}
	}
	test{
		testLogging{
			showStandardStreams  = true
		}
	}
}


project(":appsugar-archetypes-core"){
	apply plugin: "jpa-schema-generate"
	apply plugin: "dbunit"
	dependencies{
		compile ("org.appsugar:appsugar-data-jpa:${appsugarVersion}")
		compile ("ch.qos.logback:logback-classic:${logbackVersion}")
		compile ("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
		compile ("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
		compile ("org.appsugar:appsugar-service:${appsugarVersion}")
		compile ("org.apache.shiro:shiro-spring:${shiroVersion}")
		compile ("org.apache.shiro:shiro-ehcache:${shiroVersion}")
		compile ("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
	}
		
	dbunit {
		username = env["test.jdbc.username"]
		password = env["test.jdbc.password"]
		url = env["test.jdbc.url"]
		driver = env["test.jdbc.driverClassName"]
		dataTypeFactoryName  = env["test.dbunit.dataTypeFactoryName"]
	}
	
	

	task populateTestDb(type: com.ferigma.gradle.dbunit.tasks.OperationTask) {
		sources = [
				new com.ferigma.gradle.dbunit.tasks.source.OperationSource(
						transaction: true, type:env["test.dbunit.operationType"], format: "flat",
						file: "$projectDir"+env["test.dbunit.sampleData"])
		]
	}
	test.dependsOn populateTestDb
	
	generateSchema {
		vendor = "hibernate"
		databaseAction = "drop-and-create"
		scriptAction = "drop-and-create"
		packageToScan = ["org.appsugar"]
		jdbcDriver = env["test.jdbc.driverClassName"]
		jdbcUrl = env["test.jdbc.url"]
		jdbcUser = env["test.jdbc.username"]
		jdbcPassword = env["test.jdbc.password"]
		properties = ["hibernate.dialect":env["test.hibernate.dialect"]]
	}
}



project(":appsugar-archetypes-web"){
	apply plugin: 'war'
	apply plugin: "spring-boot"
	
	configurations {
		//spring repackager will pack it in executable jar or war but original not.
    	providedRuntime
	}	
	
	sourceSets {
	    test {
	        resources {
	        	srcDir  "src/main/webapp"
	            exclude "WEB-INF"
	            exclude "static"
	        }
	    }
	}
	
	dependencies{
		compile project(":appsugar-archetypes-core")
		compile ("org.apache.shiro:shiro-web:${shiroVersion}")
		compile ("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
		providedRuntime("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")
		providedRuntime ("org.apache.tomcat.embed:tomcat-embed-jasper")
		compile ("org.webjars:bootstrap:${bootstrapVersion}")
		compile ("org.webjars:jquery:${jqueryVersion}")
		compile ("org.webjars:jquery-validation:${jqueryValidationVersion}")
		compile ("org.sitemesh:sitemesh:${sitemeshVersion}")
		compile ("ro.isdc.wro4j:wro4j-core:${wro4jVersion}")
		compile ("javax.servlet:jstl:${jstlVersion}")
		compile ("${env['jdbc.groupId']}:${env['jdbc.artifactId']}:${env['jdbc.version']}")
	}
	processResources {
		from(sourceSets.main.resources.srcDirs) {
			include '*.properties'
			filter(org.apache.tools.ant.filters.ReplaceTokens,tokens: env)
		}
		doLast{
			ant.delete() {
		        fileset(dir: "${processResources.destinationDir}") {
		            include(name: '**/ApplicationResources*.properties')
		        }
	    	}
		    ant.native2ascii(src: 'src/main/resources',
		            dest: "${processResources.destinationDir}",
		            includes: '**/ApplicationResources*.properties',
		            encoding: 'UTF-8')
		}
	}
	springBoot {
    	executable = true
	}
	
}